/** 
 * File: url.h
 * -----------
 * Exports the url type.
 */

#ifndef __url_
#define __url_

/**
 * Exposed struct: url
 * -------------------
 * Manages all of the various components of a full URL.
 * The client should initialize a url instance using either
 * URLNewAbsolute or URLNewRelative, and then treat each of
 * the four fields as read only.  The client should rely
 * on URLDispose to release the three strings embedded inside.
 */

typedef struct {
  const char *fullName;
  const char *serverName;
  const char *fileName;
  unsigned short port;
} url;

/**
  							
[[fn f => fn x => if x > 0 then f x else f ((-1) * x)]](FUN w -> report w)
= (FUN w -> report w) (FN f k0 -> [[fn x => if x > 0 then f x else f ((-1) * x)]]k0)

	***subtransformation 1***
	[[fn x => if x > 0 then f x else f ((-1) * x)]]k0
	= k0 (FN x k1 -> [[if x > 0 then f x else f ((-1) * x)]]k1)

		***subtransformation 1A***
		[[if x > 0 then f x else f ((-1) * x)]]k1
		= [[x > 0]](FUN v0 -> IF a THEN [[f x]]k1 ELSE [[f ((-1) * x)]]k1)
		= (FUN v0 -> IF v0 THEN [[f x]]k1 ELSE [[f ((-1) * x)]]k1) (x > 0)
		
			***subtransformation 1Aa***
			[[f x]]k1 = [[f]](FUN v1 -> [[x]](FUN v2 -> v1 v2 k1))
			= (FUN v1 -> [[x]](FUN v2 -> v1 v2 k1)) f
			= (FUN v1 -> ((FUN v2 -> v1 v2 k1) x)) f
			***end 1Aa***
			
			***subtransformation 1Ab***
			[[f ((-1) * x)]]k1
			= [[f]](FUN v3 -> [[((-1) * x)]](FUN v4 -> v3 v4 k1))
			= (FUN v3 -> [[((-1) * x)]](FUN v4 -> v3 v4 k1)) f
			= (FUN v3 -> [[(-1)]](FUN v5 -> [[x]](FUN v6 -> (FUN v4 -> v3 v4 k1) (v5 * v6)))) f
			= (FUN v3 -> [[(-1)]](FUN v5 -> ((FUN v6 -> (FUN v4 -> v3 v4 k1) (v5 * v6)) x))) f
			= (FUN v3 -> ((FUN v5 -> ((FUN v6 -> (FUN v4 -> v3 v4 k1) (v5 * v6)) x)) (-1))) f
			***end 1Ab***
		
		= (FUN v0 -> IF v0 THEN ((FUN v1 -> ((FUN v2 -> v1 v2 k1) x)) f) ELSE ((FUN v3 -> ((FUN v5 -> ((FUN v6 -> (FUN v4 -> v3 v4 k1) (v5 * v6)) x)) (-1))) f)) (x > 0)
		***end 1A***
	
	= k0 (FN x k1 -> ((FUN v0 -> IF v0 THEN ((FUN v1 -> ((FUN v2 -> v1 v2 k1) x)) f) ELSE ((FUN v3 -> ((FUN v5 -> ((FUN v6 -> (FUN v4 -> v3 v4 k1) (v5 * v6)) x)) (-1))) f)) (x > 0)))
	***end 1***

= (FUN w -> report w) (FN f k0 -> (k0 (FN x k1 -> ((FUN v0 -> IF v0 THEN ((FUN v1 -> ((FUN v2 -> v1 v2 k1) x)) f) ELSE ((FUN v3 -> ((FUN v5 -> ((FUN v6 -> (FUN v4 -> v3 v4 k1) (v5 * v6)) x)) (-1))) f)) (x > 0)))))
 */

void URLNewAbsolute(url *u, const char *absolutePath);

/**
 * Function: URLNewRelative
 * Usage: URLNewRelative(&kottkeContactURL, &kottkeURL, "/about/contact.html");
 * ----------------------------------------------------------------------------
 * Initializes the contents of the first url from the information embedded within
 * the parentURL and the relativePath string. 
 *
 * URLNewRelative(&kottkeContactURL, &kottkeURL, "/about/contact.html");
 *
 *    Assuming that kottkeURL was initialized from "http://www.kottke.org",
 *    the above would initialize kottkeContactURL to:
 *
 *            {
 *              "www.kottke.org/about/contact.html",
 *              "www.kottke.org",
 *              "about/contact.html",
 *              80
 *            }
 *
 * If the relative path is actually an absolute path, then the information
 * within the parentURL is ignored and the url address by u is initialized
 * as if URLNewAbsolute(u, relativePath) were called.  So... 
 *
 * URLNewRelative(&bookURL, &amazonTop25FictionURL, "http://www.kiterunner.com/nytimesReview.html");
 * would result in bookURL being set to contain:
 *
 *            {
 *              "www.kiterunner.com/nytimesReview.html"
 *              "www.kiterunner.com",
 *              "nytimesReview.html",
 *              80
 *            }
 */

void URLNewRelative(url *u, const url *parentURL, const char *relativePath);

/**
 * Function: URLDispose
 * Usage: URLDispose(&myFriendsBlog);
 * ---------------------------------
 * Frees all external resources embedded inside the specified url.
 */

void URLDispose(url *u);

#endif
